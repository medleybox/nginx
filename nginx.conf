user nginx;
worker_processes 4;
pid /run/nginx.pid;
daemon off;

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

worker_rlimit_nofile 40000;

thread_pool default threads=32 max_queue=65536;

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    types_hash_max_size 2048;

    fastcgi_buffers 16 16k;
    fastcgi_buffer_size 32k;
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;

    client_body_buffer_size 10K;
    client_body_timeout 60;
    client_header_buffer_size 64k;
    client_header_timeout 60;
    client_max_body_size 100m;

    keepalive_timeout 60;
    large_client_header_buffers 4 64k;
    send_timeout 60;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    gzip on;
    gzip_static on;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_proxied  any;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_buffers 16 16k;
    gzip_http_version 1.1;

    aio threads;

    #http to https 301 redirect for all domains
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        return 301 https://$host$request_uri;
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    upstream websocket_ws {
        server websocket:8089;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        add_header X-Content-Type-Options nosniff;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        ssl_certificate /etc/nginx/app.pem;
        ssl_certificate_key /etc/nginx/app.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:25m;
        ssl_session_tickets off;

        resolver 1.1.1.1;

        error_log /var/log/nginx/error.log;
        access_log /var/log/nginx/access.log;

        location / {
            include /etc/nginx/proxy.conf;
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET';

            location /socketserver {
                proxy_pass http://websocket_ws;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
                proxy_set_header Host $host;

                proxy_connect_timeout 7d;
                proxy_send_timeout 7d;
                proxy_read_timeout 7d;
            }

            proxy_pass http://webapp:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_redirect off;
            proxy_http_version 1.1;
        }

        location /vault/ {
            rewrite /vault/(.*) /$1 break;
            proxy_pass http://vault:80;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_redirect off;
            proxy_http_version 1.1;
        }

        # Docker healthcheck
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
        }
    }
}
